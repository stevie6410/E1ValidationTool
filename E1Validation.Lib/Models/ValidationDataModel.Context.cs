//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace E1Validation.Lib.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class E1ValidationEntities : DbContext
    {
        public E1ValidationEntities()
            : base("name=E1ValidationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Conversion> Conversions { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<Sample> Samples { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<SourceTable> SourceTables { get; set; }
        public virtual DbSet<TableJoin> TableJoins { get; set; }
        public virtual DbSet<Table> Tables { get; set; }
        public virtual DbSet<FieldDetail> FieldDetails { get; set; }
        public virtual DbSet<FieldType> FieldTypes { get; set; }
        public virtual DbSet<IndexField> IndexFields { get; set; }
        public virtual DbSet<IndexHeader> IndexHeaders { get; set; }
        public virtual DbSet<tblJonOpr> tblJonOprs { get; set; }
        public virtual DbSet<tblJonTyp> tblJonTyps { get; set; }
        public virtual DbSet<TableField> TableFields { get; set; }
        public virtual DbSet<TableHeader> TableHeaders { get; set; }
        public virtual DbSet<tblVewFld> tblVewFlds { get; set; }
        public virtual DbSet<tblVewHdr> tblVewHdrs { get; set; }
        public virtual DbSet<tblVewJon> tblVewJons { get; set; }
        public virtual DbSet<XRef> XRefs { get; set; }
        public virtual DbSet<TableFields> TableFields1 { get; set; }
        public virtual DbSet<SampleTemplate> SampleTemplates { get; set; }
        public virtual DbSet<UserSampleTemplate> UserSampleTemplates { get; set; }
        public virtual DbSet<SampleValue> SampleValues { get; set; }
    
        public virtual ObjectResult<Nullable<int>> sp_GetSiteID(string sitename)
        {
            var sitenameParameter = sitename != null ?
                new ObjectParameter("sitename", sitename) :
                new ObjectParameter("sitename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetSiteID", sitenameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetTableJoinIDFromFieldName(string fieldName, string tableName)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("fieldName", fieldName) :
                new ObjectParameter("fieldName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetTableJoinIDFromFieldName", fieldNameParameter, tableNameParameter);
        }
    
        public virtual int InsertNewSampleValue(string tableValue, Nullable<int> sampleID, string fieldName)
        {
            var tableValueParameter = tableValue != null ?
                new ObjectParameter("TableValue", tableValue) :
                new ObjectParameter("TableValue", typeof(string));
    
            var sampleIDParameter = sampleID.HasValue ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(int));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNewSampleValue", tableValueParameter, sampleIDParameter, fieldNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertNewSample(string tableName, string sampleDataName, Nullable<int> siteID)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var sampleDataNameParameter = sampleDataName != null ?
                new ObjectParameter("SampleDataName", sampleDataName) :
                new ObjectParameter("SampleDataName", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertNewSample", tableNameParameter, sampleDataNameParameter, siteIDParameter);
        }
    
        public virtual int sp_LogError(string message, string user)
        {
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LogError", messageParameter, userParameter);
        }
    
        public virtual int usp_Delete_Samples(Nullable<int> siteID, string tableName)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Delete_Samples", siteIDParameter, tableNameParameter);
        }
    }
}
